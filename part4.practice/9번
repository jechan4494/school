// 9번  ///////////////////////////////////////////////////////

//main.cpp
#include <iostream>
#include <string>
#include "person.h"

using namespace std;

int main() {
    string name, tel; // 이름과 전화번호를 저장할 변수 선언
    Person* p; // Person 객체를 가리키는 포인터 선언
    
    p = new Person[3]; // Person 객체 배열 동적 할당
    
    cout << "이름과 전화번호를 입력해주세요" << endl;

    // 사용자로부터 이름과 전화번호 입력 받아 객체에 설정
    for (int i = 0; i < 3; i++) {
        cout << "사람" << i + 1 << ">>";
        cin >> name >> tel;
        p[i].set(name, tel); // Person 객체의 이름과 전화번호 설정
    }

    // 모든 사람의 이름 출력
    for (int i = 0; i < 3; i++) {
        cout << "모든 사람의 이름은 " << p[i].getName() << endl;
    }

    cout << "전화번호를 검색합니다. 이름을 입력하세요>>";
    cin >> name;

    bool found = false; // 이름을 찾았는지 여부를 저장하는 변수

    // 입력한 이름에 해당하는 사람의 전화번호 출력
    for (int i = 0; i < 3; i++) {
        if (name == p[i].getName()) {
            cout << "전화번호는 " << p[i].getTel() << endl;
            found = true; // 이름을 찾았음을 표시
            break; // 이름을 찾았으면 루프 종료
        }
    }

    if (!found) { // 이름을 찾지 못한 경우
        cout << "없는 사람입니다." << endl;
    }

    delete[] p; // 동적으로 할당된 메모리 해제
    
    return 0; // 프로그램 종료
}

// Person.cpp 파일
#include <iostream> // 표준 입출력 라이브러리 포함
#include <string> // 문자열 라이브러리 포함
#include "person.h" // person.h 헤더 파일 포함

using namespace std; // std 네임스페이스 사용

// 이름과 전화번호를 설정하는 메서드 정의
void Person::set(string name, string tel) {
    this->name = name; // 멤버 변수 name에 전달받은 name 값 설정
    this->tel = tel; // 멤버 변수 tel에 전달받은 tel 값 설정
}

// 기본 생성자 정의
Person::Person() {
    // 아무 동작도 수행하지 않음
}

// person.h 파일
#pragma once // 중복 포함 방지를 위한 pragma once 지시문
#ifndef PERSON_H // ifndef 지시문으로 PERSON_H 심볼이 정의되지 않았을 때만 아래 코드를 처리
#define PERSON_H // PERSON_H 심볼 정의
